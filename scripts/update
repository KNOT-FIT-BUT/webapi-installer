#!/bin/bash
SCRIPT_PATH="/home/casey/projects/webapiner3/"

API=$SCRIPT_PATH"server/api/"
ASSETS_CONF=$API"assets.conf/"
ASSETS_DATA=$API"assets.data/"

GIT_SSH_USER="xjerab13@"
GIT_SECAPI_URL="ssh://"$GIT_SSH_USER"knot09.fit.vutbr.cz/var/decipher/secapi"
GIT_SECAPI_FOLDER=$SCRIPT_PATH"secapi"

PWD=`pwd`

interactive=

function generateFolders(){
	printf "%-50s" "Generating folders..."
	mkdir -p $ASSETS_DATA"custom"
	mkdir -p $ASSETS_DATA"downloaded"
	mkdir -p $ASSETS_DATA"static"
	mkdir -p $SCRIPT_PATH"server/logs"
	printf "%s\n" "done!"
}


function init(){
	cd $SCRIPT_PATH
	generateFolders
	printf "%-50s" "Initializing repository..."
	git clone $GIT_SECAPI_URL $GIT_SECAPI_FOLDER -b D114-NER --depth=1
	printf "%-50s%s\n" "Initializing repository..." "done!"
	
	build
	updateAssets
	
}

function update(){
	echo $1 | sed -n 1'p' | tr ',' '\n' | while read action; do
	    case $1 in
        all)					updateGit
        						build
        						updateAssets
        						;;
		assets)           		updateAssets
        						shift
                                ;;
		secapi)          		updateGit
        						build
        						linkAssets
        						shift
                                ;;
        *)                      shift
                                exit 
    	esac
	done
}

function updateGit(){
	cd $GIT_SECAPI_FOLDER
	printf "%-50s\n" "Updating repository..."
	git reset --hard HEAD
	git clean -f -d
	git pull
	
	if [ $? -ne 0 ]; then
		printf "%-50s%s\n" "Updating repository..." "failed!"
	else
		printf "%-50s%s\n" "Updating repository..." "done!"
	fi
	
	
	
}

function updateAssets(){
	clean assets
    mkdir -p $ASSETS_DATA"downloaded"
	cd $ASSETS_DATA"downloaded"
	#source $API"NER/downloadKB.sh"
	printf "%-50s\n"  "Downloading assets..."
	grep "wget" $API"NER/downloadKB.sh" | while read line; do
		$line #-nv 
	done
	printf "%-50s%s\n%-50s" "Downloading assets..." "done!" "Generating custom assets..."
	cat ../custom/HEAD-KB KBstatsMetrics.all > ../custom/KB-HEAD.all
	printf "%s\n" "done!"
	linkAssets
}

function linkAssets(){
	
	cd $ASSETS_DATA"downloaded/"
	printf "%-50s" "Generating symlinks for assets..."
	find . -type f -not -path "./custom/*" | while read file; do
		rm -f $API"NER/"${file:2}
	    ln -s $ASSETS_DATA"downloaded/"${file:2} $API"NER/"${file:2}
	done
	cd $ASSETS_DATA
	printf "%s\n" "done!"
	bash $SCRIPT_PATH"scripts/gen_autocomplete_symlinks" 
}


function build(){
	printf "%-50s" "Removing old libraries..."
	rm -rf $API"NER"
 	rm -rf $API"SharedKB"
	printf "%s\n" "done!"
	
	printf "%-50s" "Copying new libraries..."
	cp -r $GIT_SECAPI_FOLDER"/NER" $API"NER"
	cp -r $GIT_SECAPI_FOLDER"/SharedKB" $API"SharedKB"
	cp -r $GIT_SECAPI_FOLDER"/HEAD-KB" $ASSETS_DATA"custom"
	printf "%s\n" "done!"
	
	cd $API
	printf "%-50s\n" "Building libraries..."
	make -C SharedKB/var2/
	make -C NER/figa/sources/
	make -C NER/figa/make_automat/
	printf "%-50s%s\n" "Building libraries..." "done!"
}

function clean(){
	case $1 in
        all)
        	clean assets
        	clean secapi
        	clean api					
        ;;
		assets)           		
			rm -rf $ASSETS_DATA"downloaded"
        ;;
		secapi)          		
        ;;
        *)                      
    esac
    	
}

function backup(){
	sleep 1 
}

function usage(){
  echo 'Usage : Script [switch] [params]'
  echo '	-i | --init 		first time initialization and build'
  echo '	-u | --update  		update selected part of program    '
  echo '		all|secapi|assets							   '
  echo '	-b | --build  		copy libraries from repositories   '
  echo '						and compile them				   '
  echo '	-h | --hepl 		print this help					   '
  exit
}


while [ "$1" != "" ]; do
    case $1 in
        -u | --update )         shift
                                update $1
                                exit
                                ;;
		-i | --init )           init
								exit
                                ;;
		-b | --build )          build
								linkAssets
                                ;;
		-c | --clean )          
        						echo "Clean not implemented..."
                                ;;                                                                
        -h | --help )           usage
                                exit
                                ;;
        *)                      usage
                                exit 
    esac
    shift
done

cd $PWD
